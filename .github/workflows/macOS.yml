name: macOS

on: [push]

jobs:
  build_app:
    name: Build and sign macOS app
    runs-on: macos-11
    env:
      PYTHON: /Library/Frameworks/Python.framework/Versions/3.10/bin/python3
      _PYTHON_HOST_PLATFORM: macosx-10.9-x86_64
      ARCHFLAGS: "-arch x86_64"

      
    steps:

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          DEV_ID: ${{ secrets.DEV_ID }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # Create file needed release.py
          echo -e "[developer]\nidentify = $DEV_ID"  > notabot.cfg
       
      - name: Install Python
        env:
          PYTHON_URL: https://www.python.org/ftp/python/3.10.0/python-3.10.0post2-macos11.pkg
        run: |
          wget $PYTHON_URL -O /tmp/Python.pkg
          sudo installer -pkg /tmp/Python.pkg -target /


      - name: Install packages
        run: |
          $PYTHON -m pip install cython sphinx wheel pyx py2app
          $PYTHON -m pip install FXrays cypari knot_floer_homology

      - name: Install PLink
        run: |
          $PYTHON -m pip install https://github.com/3-manifolds/PLink/archive/master.zip

      - name: Install manifolds
        run: |
          $PYTHON -m pip install https://github.com/3-manifolds/snappy_manifolds/archive/master.zip
          $PYTHON -m pip install https://github.com/3-manifolds/snappy_15_knots/archive/master.zip

      - name: Install spherogram
        run: |
          $PYTHON -m pip install https://github.com/3-manifolds/spherogram/archive/master.zip

      - name: Install snappy
        run: |
          git clone https://github.com/3-manifolds/snappy/
          cd snappy 
          $PYTHON setup.py pip_install

      - name: Do the tests
        run: |
          $PYTHON -m snappy.test --skip-modern-opengl
      
      - name: Download Framework
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          repo: 3-manifolds/frameworks
          workflow: build_py2app.yml
          workflow_conclusion: success
          name: Frameworks.tgz
          path: snappy/mac_osx_app

      - name: Build the installer
        run: |
          cp notabot.cfg snappy/mac_osx_app
          cd snappy/mac_osx_app
          $PYTHON release.py

      - uses: actions/upload-artifact@v2
        with:
          name: SnapPy.dmg
          path: snappy/mac_osx_app/disk_images/SnapPy.dmg
